---
title: "Dashboard"
format: 
  dashboard:
    orientation: columns
---

```{r}
library(tidyverse)
library(plotly)
```


```{r}
# Create example plot
gg_scatter <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +
  geom_point(size = 3) +
  labs(title = "Car Weight vs. MPG by Cylinders",
       x = "Weight (1000 lbs)",
       y = "Miles Per Gallon",
       color = "Cylinders")

# Convert to interactive plotly visualization
interactive_scatter <- ggplotly(gg_scatter)
```


# About

```{r}
#Filtering
start_date <- covid %>%
  group_by(Country_Region) %>%
  summarise(min_date = min(Date)) %>%
  pull(min_date) %>%
  max()

end_date <- covid %>%
  group_by(Country_Region) %>%
  summarise(max_date = max(Date)) %>%
  pull(max_date) %>%
  min()

covid_filtered <- covid %>% 
  filter(Date >= start_date & Date <= end_date & Country_Region %in% c("Russia", "South Korea", "Italy", "New Zealand", "Singapore", "Bangladesh")) %>% 
  mutate(
    treatment_score = (log1p(recovered) - log1p(death))
  )

#Making The Graph
ggplot(covid_filtered, mapping=aes(x=Date, y=treatment_score, color=Country_Region)) + 
  geom_line() + 
  geom_point() +
  labs(
    title = "Covid Treatment Evaluation Over Time (2020)",
    y = "Treatment Score"
  )
```

## Column

This dashboard explores COVID-19 data.

### Chart 1

```{r}
#| title: Chart 1
interactive_scatter
```

## Column

### Chart 2

```{r}
#| title: Chart 2
interactive_scatter
```

### Chart 3

```{r}
#| title: Chart 3
interactive_scatter
```



# Interactive Visualizations

## Column {width=40%}

### Chart 4

```{r}
#| title: Chart 4
library(dplyr)
library(ggplot2)
library(readr)
library(plotly)

# Load COVID dataset
covid_data <- read_csv("covid_cleaned_for_analysis.csv")
covid_data$Date <- as.Date(covid_data$Date, format = "%Y-%m-%d")

# Load population data you created
pop_data <- read_csv("population_by_country.csv")

# Merge population into COVID data
covid_data <- left_join(covid_data, pop_data, by = "Country_Region")

# Remove countries without population info
covid_data <- covid_data %>% filter(!is.na(population) & population > 0)

# Identify top countries by total case count
top_countries <- covid_data %>%
  group_by(Country_Region) %>%
  summarize(Total_Positive_All_Time = sum(daily_positive, na.rm = TRUE)) %>%
  arrange(desc(Total_Positive_All_Time)) %>%
  slice_head(n = 10)

# Filter to only top countries
filtered_data <- covid_data %>%
  filter(Country_Region %in% top_countries$Country_Region)

# Summarize and normalize by population
covid_summary <- filtered_data %>%
  group_by(Country_Region, Date, population) %>%
  summarize(Total_Positive = sum(daily_positive, na.rm = TRUE), .groups = "drop") %>%
  mutate(Cases_per_100k = (Total_Positive / population) * 100000)

# Create ggplot
gg <- ggplot(covid_summary, aes(x = Date, y = Cases_per_100k, color = Country_Region)) +
  geom_line() +
  labs(
    title = "Daily COVID-19 Cases per 100,000 People (Top Countries)",
    x = "Date",
    y = "Cases per 100k"
  ) +
  theme_minimal()

# Make it interactive
ggplotly(gg)
```

### Chart 5

```{r}
#| title: Chart 5
interactive_scatter
```

## Column {width=60%}

### Chart 6

```{r}
#| title: Chart 6
#install.packages("viridis")

library(ggplot2)
library(dplyr)
library(sf)
library(viridis)
read.csv("covid_cleaned_for_analysis.csv")
COVID <- read.csv("covid_cleaned_for_analysis.csv")

filtered_COVID <- COVID %>% 
  group_by(Country_Region)

covid_summary <- filtered_COVID %>%
  group_by(Country_Region) %>%
  summarise(total_cases = sum(positive, na.rm = TRUE))

world_sf <- read_sf("https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/world.geojson")
world_sf <- world_sf %>%
  filter(!name %in% c("Antarctica", "Greenland"))
world_covid <- left_join(world_sf, covid_summary, by = c("name" = "Country_Region"))

ggplot(data = world_covid) +
  geom_sf(aes(fill = total_cases), color = "white", size = 0.1) +
  scale_fill_viridis(
    option = "plasma",
    trans = "log",     
    na.value = "grey90",
    name = "Total Cases"
  ) +
  labs(
    title = "Global COVID-19 Total Cases in 2020",
    caption = "Source: filtered_COVID"
  ) +
  theme_void() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 8)
  )
```
