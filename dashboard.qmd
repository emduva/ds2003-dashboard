---
title: "COVID-19 Dashboard"
format: 
  dashboard:
    orientation: columns
---

```{r}
# Load libraries
library(tidyverse)
library(plotly)
library(dplyr)
library(ggplot2)
library(readr)
library(sf)
library(viridis)
library(shiny)
library(countrycode)

```

```{r}
# Load in data sets
covid <- read_csv("covid_cleaned_for_analysis.csv")
pop_data <- read_csv("population_by_country.csv")
```


# About

## Column {width=60%}

This dashboard explores COVID-19 data.

### Chart 1

```{r}
#| title: Treatment Evaluation
#Filtering
start_date <- covid %>%
  group_by(Country_Region) %>%
  summarise(min_date = min(Date)) %>%
  pull(min_date) %>%
  max()

end_date <- covid %>%
  group_by(Country_Region) %>%
  summarise(max_date = max(Date)) %>%
  pull(max_date) %>%
  min()

covid_filtered <- covid %>% 
  filter(Date >= start_date & Date <= end_date & Country_Region %in% c("Russia", "South Korea", "Italy", "New Zealand", "Singapore", "Bangladesh")) %>% 
  mutate(
    treatment_score = (log1p(recovered) - log1p(death))
  )

#Making The Graph
ggplot(covid_filtered, mapping=aes(x=Date, y=treatment_score, color=Country_Region)) + 
  geom_line() + 
  geom_point() +
  labs(
    title = "Covid Treatment Evaluation Over Time (2020)",
    y = "Treatment Score"
  )
```

## Column {width=40%}

### Chart 2

```{r}
#| title: Influence of Testing on Case Data

COVID <- covid
Population <- pop_data

bubble_data <- COVID %>%
  group_by(Country_Region) %>%
  summarise(
    total_cases = sum(positive, na.rm = TRUE),
    total_tests = sum(total_tested, na.rm = TRUE)
  ) %>%
  left_join(Population, by = "Country_Region") %>%
  filter(!is.na(population) & population > 0) %>%
  mutate(
    cases_per_1000 = (total_cases / population) * 1000,
    tests_per_1000 = (total_tests / population) * 1000,
    continent = countrycode(Country_Region, origin = "country.name", destination = "continent")
  )

bubble_data$continent[is.na(bubble_data$continent)] <- "Other"

plot_ly(
  data = bubble_data,
  x = ~tests_per_1000,
  y = ~cases_per_1000,
  type = "scatter",
  mode = "markers",
  size = ~population,
  sizes = c(50, 300),
  color = ~continent,
  text = ~paste(
    "Country:", Country_Region,
    "<br>Continent:", continent,
    "<br>Cases per 1,000:", round(cases_per_1000, 2),
    "<br>Tests per 1,000:", round(tests_per_1000, 2),
    "<br>Population:", format(population, big.mark = ",")
  ),
  hoverinfo = "text"
) %>%
  layout(
    title = "Cases vs. Tests per 1,000 People (Bubble Size = Population)",
    xaxis = list(title = "Tests per 1,000 People"),
    yaxis = list(title = "Cases per 1,000 People"),
    legend = list(title = list(text = "<b>Continent</b>"))
  )
```


# Interactive Visualizations

## Column {width=40%}

### Chart 4

```{r}
#| title: Cases Over Time

# Load COVID dataset
covid_data <- covid
covid_data$Date <- as.Date(covid_data$Date, format = "%Y-%m-%d")

# Load population data you created


# Merge population into COVID data
covid_data <- left_join(covid_data, pop_data, by = "Country_Region")

# Remove countries without population info
covid_data <- covid_data %>% filter(!is.na(population) & population > 0)

# Identify top countries by total case count
top_countries <- covid_data %>%
  group_by(Country_Region) %>%
  summarize(Total_Positive_All_Time = sum(daily_positive, na.rm = TRUE)) %>%
  arrange(desc(Total_Positive_All_Time)) %>%
  slice_head(n = 10)

# Filter to only top countries
filtered_data <- covid_data %>%
  filter(Country_Region %in% top_countries$Country_Region)

# Summarize and normalize by population
covid_summary <- filtered_data %>%
  group_by(Country_Region, Date, population) %>%
  summarize(Total_Positive = sum(daily_positive, na.rm = TRUE), .groups = "drop") %>%
  mutate(Cases_per_100k = (Total_Positive / population) * 100000)

# Create ggplot
gg <- ggplot(covid_summary, aes(x = Date, y = Cases_per_100k, color = Country_Region)) +
  geom_line() +
  labs(
    title = "Daily COVID-19 Cases per 100,000 People (Top Countries)",
    x = "Date",
    y = "Cases per 100k"
  ) +
  theme_minimal()

# Make it interactive
ggplotly(gg)
```

### Chart 5

```{r}
#| title: Deaths and Recoveries


# TODO - ability to filter this to a specific date range

covid_filtered <- covid %>% 
  group_by(Country_Region) %>% 
  summarize(death_tot = sum(death, na.rm = TRUE),
            recov_tot = sum(recovered, na.rm = TRUE))

covid_pivot <- pivot_longer(covid_filtered, cols = c(death_tot, recov_tot),
                            names_to = "Case", values_to = "Count")

death_recovery_graph <- ggplot(covid_pivot, aes(x = Count, y = reorder(Country_Region, Count), fill = Case)) +
  geom_bar(stat = "identity")

ggplotly(death_recovery_graph, tooltip = "text")
```

## Column {width=60%}

### Chart 6

```{r}
#| title: COVID Case Map

COVID <- covid
Population <- pop_data

covid_summary <- COVID %>%
  group_by(Country_Region) %>%
  summarise(total_cases = sum(positive, na.rm = TRUE))

covid_summary <- left_join(covid_summary, Population, by = "Country_Region")

covid_summary <- covid_summary %>%
  mutate(cases_scaled = (total_cases / population) * 100000)

world_sf <- read_sf("https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/world.geojson") %>%
  filter(!name %in% c("Antarctica", "Greenland"))

world_covid <- left_join(world_sf, covid_summary, by = c("name" = "Country_Region"))

final_graph <- ggplot(data = world_covid) +
  geom_sf(aes(
    fill = cases_scaled,
    text = paste0("Country: ", name, "\nCases per 100,000 People: ", round(cases_scaled, 2))
  ),
  color = "white", size = 0.1) +
  scale_fill_viridis(
    option = "plasma",
    trans = "log",
    na.value = "grey90",
    name = "Cases per 100,000 People"
  ) +
  labs(
    title = "Global COVID-19 Cases per 100,000 People (2020)",
    caption = "Source: covid_cleaned_for_analysis.csv, population_by_country.csv"
  ) +
  theme_void() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 8)
  )

ggplotly(final_graph, tooltip = "text")
```
